
Minimal.elf:     format de fichier elf32-avr

Sections :
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000a48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  00000a48  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004a4b  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001893  00000000  00000000  00005717  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002946  00000000  00000000  00006faa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006bc  00000000  00000000  000098f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e55  00000000  00000000  00009fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c94  00000000  00000000  0000be01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000358  00000000  00000000  0000ea95  2**0
                  CONTENTS, READONLY, DEBUGGING

Déassemblage de la section .text :

00000000 <__vectors>:
   0:	8c c0       	rjmp	.+280    	; 0x11a <__ctors_end>
   2:	00 00       	nop
   4:	9a c0       	rjmp	.+308    	; 0x13a <__bad_interrupt>
   6:	00 00       	nop
   8:	98 c0       	rjmp	.+304    	; 0x13a <__bad_interrupt>
   a:	00 00       	nop
   c:	96 c0       	rjmp	.+300    	; 0x13a <__bad_interrupt>
   e:	00 00       	nop
  10:	94 c0       	rjmp	.+296    	; 0x13a <__bad_interrupt>
  12:	00 00       	nop
  14:	92 c0       	rjmp	.+292    	; 0x13a <__bad_interrupt>
  16:	00 00       	nop
  18:	90 c0       	rjmp	.+288    	; 0x13a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8e c0       	rjmp	.+284    	; 0x13a <__bad_interrupt>
  1e:	00 00       	nop
  20:	8c c0       	rjmp	.+280    	; 0x13a <__bad_interrupt>
  22:	00 00       	nop
  24:	8a c0       	rjmp	.+276    	; 0x13a <__bad_interrupt>
  26:	00 00       	nop
  28:	49 c2       	rjmp	.+1170   	; 0x4bc <__vector_10>
  2a:	00 00       	nop
  2c:	12 c3       	rjmp	.+1572   	; 0x652 <__vector_11>
  2e:	00 00       	nop
  30:	84 c0       	rjmp	.+264    	; 0x13a <__bad_interrupt>
  32:	00 00       	nop
  34:	82 c0       	rjmp	.+260    	; 0x13a <__bad_interrupt>
  36:	00 00       	nop
  38:	80 c0       	rjmp	.+256    	; 0x13a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	7e c0       	rjmp	.+252    	; 0x13a <__bad_interrupt>
  3e:	00 00       	nop
  40:	7c c0       	rjmp	.+248    	; 0x13a <__bad_interrupt>
  42:	00 00       	nop
  44:	7a c0       	rjmp	.+244    	; 0x13a <__bad_interrupt>
  46:	00 00       	nop
  48:	78 c0       	rjmp	.+240    	; 0x13a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	76 c0       	rjmp	.+236    	; 0x13a <__bad_interrupt>
  4e:	00 00       	nop
  50:	74 c0       	rjmp	.+232    	; 0x13a <__bad_interrupt>
  52:	00 00       	nop
  54:	72 c0       	rjmp	.+228    	; 0x13a <__bad_interrupt>
  56:	00 00       	nop
  58:	70 c0       	rjmp	.+224    	; 0x13a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6e c0       	rjmp	.+220    	; 0x13a <__bad_interrupt>
  5e:	00 00       	nop
  60:	6c c0       	rjmp	.+216    	; 0x13a <__bad_interrupt>
  62:	00 00       	nop
  64:	6a c0       	rjmp	.+212    	; 0x13a <__bad_interrupt>
  66:	00 00       	nop
  68:	68 c0       	rjmp	.+208    	; 0x13a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	66 c0       	rjmp	.+204    	; 0x13a <__bad_interrupt>
  6e:	00 00       	nop
  70:	64 c0       	rjmp	.+200    	; 0x13a <__bad_interrupt>
  72:	00 00       	nop
  74:	62 c0       	rjmp	.+196    	; 0x13a <__bad_interrupt>
  76:	00 00       	nop
  78:	60 c0       	rjmp	.+192    	; 0x13a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	5e c0       	rjmp	.+188    	; 0x13a <__bad_interrupt>
  7e:	00 00       	nop
  80:	5c c0       	rjmp	.+184    	; 0x13a <__bad_interrupt>
  82:	00 00       	nop
  84:	5a c0       	rjmp	.+180    	; 0x13a <__bad_interrupt>
  86:	00 00       	nop
  88:	58 c0       	rjmp	.+176    	; 0x13a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	56 c0       	rjmp	.+172    	; 0x13a <__bad_interrupt>
  8e:	00 00       	nop
  90:	54 c0       	rjmp	.+168    	; 0x13a <__bad_interrupt>
  92:	00 00       	nop
  94:	52 c0       	rjmp	.+164    	; 0x13a <__bad_interrupt>
  96:	00 00       	nop
  98:	50 c0       	rjmp	.+160    	; 0x13a <__bad_interrupt>
  9a:	00 00       	nop
  9c:	4e c0       	rjmp	.+156    	; 0x13a <__bad_interrupt>
  9e:	00 00       	nop
  a0:	4c c0       	rjmp	.+152    	; 0x13a <__bad_interrupt>
  a2:	00 00       	nop
  a4:	4a c0       	rjmp	.+148    	; 0x13a <__bad_interrupt>
  a6:	00 00       	nop
  a8:	48 c0       	rjmp	.+144    	; 0x13a <__bad_interrupt>
  aa:	00 00       	nop

000000ac <ProductString>:
  ac:	1a 03 4c 00 55 00 46 00 41 00 20 00 4d 00 69 00     ..L.U.F.A. .M.i.
  bc:	6e 00 69 00 6d 00 61 00 6c 00 00 00                 n.i.m.a.l...

000000c8 <ManufacturerString>:
  c8:	1a 03 4c 00 55 00 46 00 41 00 20 00 4c 00 69 00     ..L.U.F.A. .L.i.
  d8:	62 00 72 00 61 00 72 00 79 00 00 00                 b.r.a.r.y...

000000e4 <LanguageString>:
  e4:	04 03 09 04                                         ....

000000e8 <ConfigurationDescriptor>:
  e8:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 ff 00     .. .....2.......
  f8:	00 00 07 05 81 02 40 00 05 07 05 02 03 08 00 05     ......@.........

00000108 <DeviceDescriptor>:
 108:	12 01 10 01 00 00 00 08 42 42 01 00 01 00 01 02     ........BB......
 118:	dc 01                                               ..

0000011a <__ctors_end>:
 11a:	11 24       	eor	r1, r1
 11c:	1f be       	out	0x3f, r1	; 63
 11e:	cf ef       	ldi	r28, 0xFF	; 255
 120:	da e0       	ldi	r29, 0x0A	; 10
 122:	de bf       	out	0x3e, r29	; 62
 124:	cd bf       	out	0x3d, r28	; 61

00000126 <__do_clear_bss>:
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	a0 e0       	ldi	r26, 0x00	; 0
 12a:	b1 e0       	ldi	r27, 0x01	; 1
 12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
 12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
 130:	ad 30       	cpi	r26, 0x0D	; 13
 132:	b2 07       	cpc	r27, r18
 134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>
 136:	1a d0       	rcall	.+52     	; 0x16c <main>
 138:	4b c4       	rjmp	.+2198   	; 0x9d0 <_exit>

0000013a <__bad_interrupt>:
 13a:	62 cf       	rjmp	.-316    	; 0x0 <__vectors>

0000013c <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 13c:	84 b7       	in	r24, 0x34	; 52
 13e:	87 7f       	andi	r24, 0xF7	; 247
 140:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	f8 94       	cli
 146:	a8 95       	wdr
 148:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 14c:	88 61       	ori	r24, 0x18	; 24
 14e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 152:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 156:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	80 e8       	ldi	r24, 0x80	; 128
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	f8 94       	cli
 160:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
 164:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
 168:	0f be       	out	0x3f, r0	; 63

	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
#endif

	/* Hardware Initialization */
	USB_Init();
 16a:	8b c1       	rjmp	.+790    	; 0x482 <USB_Init>

0000016c <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
 16c:	e7 df       	rcall	.-50     	; 0x13c <SetupHardware>

	GlobalInterruptEnable();

	for (;;)
	{
		USB_USBTask();
 16e:	78 94       	sei
 170:	15 d4       	rcall	.+2090   	; 0x99c <USB_USBTask>
 172:	fe cf       	rjmp	.-4      	; 0x170 <main+0x4>

00000174 <EVENT_USB_Device_Connect>:
 174:	08 95       	ret

00000176 <EVENT_USB_Device_Disconnect>:
 176:	08 95       	ret

00000178 <EVENT_USB_Device_ConfigurationChanged>:
 178:	08 95       	ret

0000017a <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
 17a:	08 95       	ret

0000017c <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 17c:	29 2f       	mov	r18, r25
 17e:	33 27       	eor	r19, r19
 180:	22 30       	cpi	r18, 0x02	; 2
 182:	31 05       	cpc	r19, r1
 184:	59 f0       	breq	.+22     	; 0x19c <CALLBACK_USB_GetDescriptor+0x20>
 186:	23 30       	cpi	r18, 0x03	; 3
 188:	31 05       	cpc	r19, r1
 18a:	69 f0       	breq	.+26     	; 0x1a6 <CALLBACK_USB_GetDescriptor+0x2a>
 18c:	21 30       	cpi	r18, 0x01	; 1
 18e:	31 05       	cpc	r19, r1
 190:	e9 f4       	brne	.+58     	; 0x1cc <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 192:	82 e1       	ldi	r24, 0x12	; 18
 194:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 196:	28 e0       	ldi	r18, 0x08	; 8
 198:	31 e0       	ldi	r19, 0x01	; 1
 19a:	1c c0       	rjmp	.+56     	; 0x1d4 <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 19c:	80 e2       	ldi	r24, 0x20	; 32
 19e:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 1a0:	28 ee       	ldi	r18, 0xE8	; 232
 1a2:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 1a4:	17 c0       	rjmp	.+46     	; 0x1d4 <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
 1a6:	99 27       	eor	r25, r25
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	91 05       	cpc	r25, r1
 1ac:	49 f0       	breq	.+18     	; 0x1c0 <CALLBACK_USB_GetDescriptor+0x44>
 1ae:	28 f0       	brcs	.+10     	; 0x1ba <CALLBACK_USB_GetDescriptor+0x3e>
 1b0:	02 97       	sbiw	r24, 0x02	; 2
 1b2:	61 f4       	brne	.+24     	; 0x1cc <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 1b4:	ec ea       	ldi	r30, 0xAC	; 172
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	05 c0       	rjmp	.+10     	; 0x1c4 <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 1ba:	e4 ee       	ldi	r30, 0xE4	; 228
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 1c0:	e8 ec       	ldi	r30, 0xC8	; 200
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 1c4:	84 91       	lpm	r24, Z
 1c6:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
 1c8:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 1d4:	fa 01       	movw	r30, r20
 1d6:	31 83       	std	Z+1, r19	; 0x01
 1d8:	20 83       	st	Z, r18
	return Size;
}
 1da:	08 95       	ret

000001dc <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 1dc:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <USB_ControlRequest+0x6>
 1e0:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <USB_ControlRequest+0x7>
 1e4:	26 17       	cp	r18, r22
 1e6:	37 07       	cpc	r19, r23
 1e8:	48 f0       	brcs	.+18     	; 0x1fc <Endpoint_Write_Control_Stream_LE+0x20>
 1ea:	61 15       	cp	r22, r1
 1ec:	71 05       	cpc	r23, r1
 1ee:	39 f4       	brne	.+14     	; 0x1fe <Endpoint_Write_Control_Stream_LE+0x22>
 1f0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 1f4:	2e 77       	andi	r18, 0x7E	; 126
 1f6:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 1fa:	01 c0       	rjmp	.+2      	; 0x1fe <Endpoint_Write_Control_Stream_LE+0x22>
 1fc:	b9 01       	movw	r22, r18
 1fe:	fc 01       	movw	r30, r24
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	61 15       	cp	r22, r1
 204:	71 05       	cpc	r23, r1
 206:	79 f1       	breq	.+94     	; 0x266 <Endpoint_Write_Control_Stream_LE+0x8a>
 208:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>
 20c:	88 23       	and	r24, r24
 20e:	f1 f1       	breq	.+124    	; 0x28c <Endpoint_Write_Control_Stream_LE+0xb0>
 210:	85 30       	cpi	r24, 0x05	; 5
 212:	f1 f1       	breq	.+124    	; 0x290 <Endpoint_Write_Control_Stream_LE+0xb4>
 214:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 218:	83 fd       	sbrc	r24, 3
 21a:	3c c0       	rjmp	.+120    	; 0x294 <Endpoint_Write_Control_Stream_LE+0xb8>
 21c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 220:	82 fd       	sbrc	r24, 2
 222:	2e c0       	rjmp	.+92     	; 0x280 <Endpoint_Write_Control_Stream_LE+0xa4>
 224:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 228:	80 ff       	sbrs	r24, 0
 22a:	eb cf       	rjmp	.-42     	; 0x202 <Endpoint_Write_Control_Stream_LE+0x26>
 22c:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 230:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	92 2b       	or	r25, r18
 238:	61 15       	cp	r22, r1
 23a:	71 05       	cpc	r23, r1
 23c:	51 f0       	breq	.+20     	; 0x252 <Endpoint_Write_Control_Stream_LE+0x76>
 23e:	88 30       	cpi	r24, 0x08	; 8
 240:	91 05       	cpc	r25, r1
 242:	38 f4       	brcc	.+14     	; 0x252 <Endpoint_Write_Control_Stream_LE+0x76>
 244:	21 91       	ld	r18, Z+
 246:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 24a:	61 50       	subi	r22, 0x01	; 1
 24c:	71 09       	sbc	r23, r1
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	f3 cf       	rjmp	.-26     	; 0x238 <Endpoint_Write_Control_Stream_LE+0x5c>
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	08 97       	sbiw	r24, 0x08	; 8
 256:	09 f0       	breq	.+2      	; 0x25a <Endpoint_Write_Control_Stream_LE+0x7e>
 258:	20 e0       	ldi	r18, 0x00	; 0
 25a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 25e:	8e 77       	andi	r24, 0x7E	; 126
 260:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 264:	ce cf       	rjmp	.-100    	; 0x202 <Endpoint_Write_Control_Stream_LE+0x26>
 266:	21 11       	cpse	r18, r1
 268:	cf cf       	rjmp	.-98     	; 0x208 <Endpoint_Write_Control_Stream_LE+0x2c>
 26a:	0a c0       	rjmp	.+20     	; 0x280 <Endpoint_Write_Control_Stream_LE+0xa4>
 26c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>
 270:	88 23       	and	r24, r24
 272:	61 f0       	breq	.+24     	; 0x28c <Endpoint_Write_Control_Stream_LE+0xb0>
 274:	85 30       	cpi	r24, 0x05	; 5
 276:	61 f0       	breq	.+24     	; 0x290 <Endpoint_Write_Control_Stream_LE+0xb4>
 278:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 27c:	83 fd       	sbrc	r24, 3
 27e:	0a c0       	rjmp	.+20     	; 0x294 <Endpoint_Write_Control_Stream_LE+0xb8>
 280:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 284:	82 ff       	sbrs	r24, 2
 286:	f2 cf       	rjmp	.-28     	; 0x26c <Endpoint_Write_Control_Stream_LE+0x90>
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	08 95       	ret
 28c:	82 e0       	ldi	r24, 0x02	; 2
 28e:	08 95       	ret
 290:	83 e0       	ldi	r24, 0x03	; 3
 292:	08 95       	ret
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	08 95       	ret

00000298 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 298:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <USB_ControlRequest+0x6>
 29c:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <USB_ControlRequest+0x7>
 2a0:	26 17       	cp	r18, r22
 2a2:	37 07       	cpc	r19, r23
 2a4:	48 f0       	brcs	.+18     	; 0x2b8 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 2a6:	61 15       	cp	r22, r1
 2a8:	71 05       	cpc	r23, r1
 2aa:	39 f4       	brne	.+14     	; 0x2ba <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 2ac:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 2b0:	2e 77       	andi	r18, 0x7E	; 126
 2b2:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 2b6:	01 c0       	rjmp	.+2      	; 0x2ba <Endpoint_Write_Control_PStream_LE+0x22>
 2b8:	b9 01       	movw	r22, r18
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 2be:	61 15       	cp	r22, r1
 2c0:	71 05       	cpc	r23, r1
 2c2:	91 f1       	breq	.+100    	; 0x328 <Endpoint_Write_Control_PStream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 2c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 2c8:	88 23       	and	r24, r24
 2ca:	09 f4       	brne	.+2      	; 0x2ce <Endpoint_Write_Control_PStream_LE+0x36>
 2cc:	40 c0       	rjmp	.+128    	; 0x34e <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 2ce:	85 30       	cpi	r24, 0x05	; 5
 2d0:	09 f4       	brne	.+2      	; 0x2d4 <Endpoint_Write_Control_PStream_LE+0x3c>
 2d2:	3f c0       	rjmp	.+126    	; 0x352 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 2d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 2d8:	83 fd       	sbrc	r24, 3
 2da:	3d c0       	rjmp	.+122    	; 0x356 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 2dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 2e0:	82 fd       	sbrc	r24, 2
 2e2:	2f c0       	rjmp	.+94     	; 0x342 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 2e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  break;

		if (Endpoint_IsINReady())
 2e8:	80 ff       	sbrs	r24, 0
 2ea:	e9 cf       	rjmp	.-46     	; 0x2be <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 2ec:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 2f0:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 2f8:	61 15       	cp	r22, r1
 2fa:	71 05       	cpc	r23, r1
 2fc:	59 f0       	breq	.+22     	; 0x314 <Endpoint_Write_Control_PStream_LE+0x7c>
 2fe:	88 30       	cpi	r24, 0x08	; 8
 300:	91 05       	cpc	r25, r1
 302:	40 f4       	brcc	.+16     	; 0x314 <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 304:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 306:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 30a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 30c:	61 50       	subi	r22, 0x01	; 1
 30e:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	f2 cf       	rjmp	.-28     	; 0x2f8 <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 314:	21 e0       	ldi	r18, 0x01	; 1
 316:	08 97       	sbiw	r24, 0x08	; 8
 318:	09 f0       	breq	.+2      	; 0x31c <Endpoint_Write_Control_PStream_LE+0x84>
 31a:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 31c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 320:	8e 77       	andi	r24, 0x7E	; 126
 322:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 326:	cb cf       	rjmp	.-106    	; 0x2be <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 328:	21 11       	cpse	r18, r1
 32a:	cc cf       	rjmp	.-104    	; 0x2c4 <Endpoint_Write_Control_PStream_LE+0x2c>
 32c:	0a c0       	rjmp	.+20     	; 0x342 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 32e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 332:	88 23       	and	r24, r24
 334:	61 f0       	breq	.+24     	; 0x34e <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 336:	85 30       	cpi	r24, 0x05	; 5
 338:	61 f0       	breq	.+24     	; 0x352 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 33a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 33e:	83 fd       	sbrc	r24, 3
 340:	0a c0       	rjmp	.+20     	; 0x356 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 342:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 346:	82 ff       	sbrs	r24, 2
 348:	f2 cf       	rjmp	.-28     	; 0x32e <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 352:	83 e0       	ldi	r24, 0x03	; 3
 354:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 356:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 358:	08 95       	ret

0000035a <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 35a:	98 2f       	mov	r25, r24
 35c:	97 30       	cpi	r25, 0x07	; 7
 35e:	68 f5       	brcc	.+90     	; 0x3ba <Endpoint_ConfigureEndpoint_Prv+0x60>
 360:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
 364:	98 17       	cp	r25, r24
 366:	39 f0       	breq	.+14     	; 0x376 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 368:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
 36c:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
 370:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 374:	03 c0       	rjmp	.+6      	; 0x37c <Endpoint_ConfigureEndpoint_Prv+0x22>
 376:	24 2f       	mov	r18, r20
 378:	76 2f       	mov	r23, r22
 37a:	50 e0       	ldi	r21, 0x00	; 0
 37c:	21 fd       	sbrc	r18, 1
 37e:	02 c0       	rjmp	.+4      	; 0x384 <Endpoint_ConfigureEndpoint_Prv+0x2a>
 380:	9f 5f       	subi	r25, 0xFF	; 255
 382:	ec cf       	rjmp	.-40     	; 0x35c <Endpoint_ConfigureEndpoint_Prv+0x2>
 384:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
 388:	3e 7f       	andi	r19, 0xFE	; 254
 38a:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
 38e:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
 392:	3d 7f       	andi	r19, 0xFD	; 253
 394:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
 398:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
 39c:	31 60       	ori	r19, 0x01	; 1
 39e:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
 3a2:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
 3a6:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
 3aa:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 3ae:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
 3b2:	27 fd       	sbrc	r18, 7
 3b4:	e5 cf       	rjmp	.-54     	; 0x380 <Endpoint_ConfigureEndpoint_Prv+0x26>
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	08 95       	ret
 3ba:	8f 70       	andi	r24, 0x0F	; 15
 3bc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	08 95       	ret

000003c4 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 3c4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <USB_ControlRequest>
 3c8:	87 ff       	sbrs	r24, 7
 3ca:	11 c0       	rjmp	.+34     	; 0x3ee <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 3d0:	82 fd       	sbrc	r24, 2
 3d2:	05 c0       	rjmp	.+10     	; 0x3de <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 3d4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>
 3d8:	81 11       	cpse	r24, r1
 3da:	f8 cf       	rjmp	.-16     	; 0x3cc <Endpoint_ClearStatusStage+0x8>
 3dc:	11 c0       	rjmp	.+34     	; 0x400 <__EEPROM_REGION_LENGTH__>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 3de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 3e2:	8b 77       	andi	r24, 0x7B	; 123
 3e4:	0b c0       	rjmp	.+22     	; 0x3fc <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 3e6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>
 3ea:	88 23       	and	r24, r24
 3ec:	49 f0       	breq	.+18     	; 0x400 <__EEPROM_REGION_LENGTH__>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 3ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 3f2:	80 ff       	sbrs	r24, 0
 3f4:	f8 cf       	rjmp	.-16     	; 0x3e6 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 3f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 3fa:	8e 77       	andi	r24, 0x7E	; 126
 3fc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 400:	08 95       	ret

00000402 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 402:	0f 93       	push	r16
 404:	1f 93       	push	r17
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 40a:	4b d0       	rcall	.+150    	; 0x4a2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 40c:	52 d0       	rcall	.+164    	; 0x4b2 <USB_INT_ClearAllInterrupts>
 40e:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 410:	d0 e0       	ldi	r29, 0x00	; 0
 412:	88 81       	ld	r24, Y
 414:	8f 77       	andi	r24, 0x7F	; 127
 416:	88 83       	st	Y, r24
 418:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
 41a:	80 68       	ori	r24, 0x80	; 128
 41c:	88 83       	st	Y, r24
 41e:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 420:	8f 7d       	andi	r24, 0xDF	; 223
 422:	88 83       	st	Y, r24
 424:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 426:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 42a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	USB_Device_ConfigurationNumber  = 0;
 42e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 432:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 436:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 438:	10 e0       	ldi	r17, 0x00	; 0
 43a:	f8 01       	movw	r30, r16
 43c:	80 81       	ld	r24, Z
 43e:	8b 7f       	andi	r24, 0xFB	; 251
 440:	80 83       	st	Z, r24
 442:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 444:	81 60       	ori	r24, 0x01	; 1
 446:	88 83       	st	Y, r24
 448:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	85 df       	rcall	.-246    	; 0x35a <Endpoint_ConfigureEndpoint_Prv>
 450:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	80 81       	ld	r24, Z
 456:	8e 7f       	andi	r24, 0xFE	; 254
 458:	80 83       	st	Z, r24
 45a:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	80 81       	ld	r24, Z
 460:	81 60       	ori	r24, 0x01	; 1
 462:	80 83       	st	Z, r24
 464:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 466:	88 60       	ori	r24, 0x08	; 8
 468:	80 83       	st	Z, r24
 46a:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 46c:	80 81       	ld	r24, Z
 46e:	8e 7f       	andi	r24, 0xFE	; 254
 470:	80 83       	st	Z, r24
 472:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 474:	80 61       	ori	r24, 0x10	; 16
 476:	88 83       	st	Y, r24
 478:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 47a:	cf 91       	pop	r28
 47c:	1f 91       	pop	r17
 47e:	0f 91       	pop	r16
 480:	08 95       	ret

00000482 <USB_Init>:
 482:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	80 81       	ld	r24, Z
 488:	8f 7e       	andi	r24, 0xEF	; 239
 48a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 48c:	e7 ed       	ldi	r30, 0xD7	; 215
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	80 81       	ld	r24, Z
 492:	81 60       	ori	r24, 0x01	; 1
 494:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
 496:	84 e0       	ldi	r24, 0x04	; 4
 498:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <USB_IsInitialized>

	USB_ResetInterface();
 4a0:	b0 cf       	rjmp	.-160    	; 0x402 <USB_ResetInterface>

000004a2 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
 4a2:	e8 ed       	ldi	r30, 0xD8	; 216
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 81       	ld	r24, Z
 4a8:	8e 7f       	andi	r24, 0xFE	; 254
 4aa:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 4ac:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 4b0:	08 95       	ret

000004b2 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 4b2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 4b6:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
 4ba:	08 95       	ret

000004bc <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 4bc:	1f 92       	push	r1
 4be:	0f 92       	push	r0
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	0f 92       	push	r0
 4c4:	11 24       	eor	r1, r1
 4c6:	2f 93       	push	r18
 4c8:	3f 93       	push	r19
 4ca:	4f 93       	push	r20
 4cc:	5f 93       	push	r21
 4ce:	6f 93       	push	r22
 4d0:	7f 93       	push	r23
 4d2:	8f 93       	push	r24
 4d4:	9f 93       	push	r25
 4d6:	af 93       	push	r26
 4d8:	bf 93       	push	r27
 4da:	ef 93       	push	r30
 4dc:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 4de:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 4e2:	82 ff       	sbrs	r24, 2
 4e4:	0a c0       	rjmp	.+20     	; 0x4fa <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 4e6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 4ea:	82 ff       	sbrs	r24, 2
 4ec:	06 c0       	rjmp	.+12     	; 0x4fa <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 4ee:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
 4f2:	8b 7f       	andi	r24, 0xFB	; 251
 4f4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 4f8:	50 d2       	rcall	.+1184   	; 0x99a <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 4fa:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 4fe:	80 ff       	sbrs	r24, 0
 500:	1d c0       	rjmp	.+58     	; 0x53c <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 502:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
 506:	80 ff       	sbrs	r24, 0
 508:	19 c0       	rjmp	.+50     	; 0x53c <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 50a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
 50e:	8e 7f       	andi	r24, 0xFE	; 254
 510:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 514:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 518:	80 ff       	sbrs	r24, 0
 51a:	0c c0       	rjmp	.+24     	; 0x534 <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 51c:	80 e1       	ldi	r24, 0x10	; 16
 51e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 520:	82 e1       	ldi	r24, 0x12	; 18
 522:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 524:	09 b4       	in	r0, 0x29	; 41
 526:	00 fe       	sbrs	r0, 0
 528:	fd cf       	rjmp	.-6      	; 0x524 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <USB_DeviceState>
			EVENT_USB_Device_Connect();
 530:	21 de       	rcall	.-958    	; 0x174 <EVENT_USB_Device_Connect>
 532:	04 c0       	rjmp	.+8      	; 0x53c <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 534:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 536:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
 53a:	1d de       	rcall	.-966    	; 0x176 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 53c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 540:	80 ff       	sbrs	r24, 0
 542:	18 c0       	rjmp	.+48     	; 0x574 <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 544:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 548:	80 ff       	sbrs	r24, 0
 54a:	14 c0       	rjmp	.+40     	; 0x574 <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 54c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 550:	8e 7f       	andi	r24, 0xFE	; 254
 552:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 556:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 55a:	80 61       	ori	r24, 0x10	; 16
 55c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 560:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
 564:	80 62       	ori	r24, 0x20	; 32
 566:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 56a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 56c:	85 e0       	ldi	r24, 0x05	; 5
 56e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
 572:	13 d2       	rcall	.+1062   	; 0x99a <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 574:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 578:	84 ff       	sbrs	r24, 4
 57a:	2f c0       	rjmp	.+94     	; 0x5da <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 57c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 580:	84 ff       	sbrs	r24, 4
 582:	2b c0       	rjmp	.+86     	; 0x5da <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 584:	80 e1       	ldi	r24, 0x10	; 16
 586:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 588:	82 e1       	ldi	r24, 0x12	; 18
 58a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 58c:	09 b4       	in	r0, 0x29	; 41
 58e:	00 fe       	sbrs	r0, 0
 590:	fd cf       	rjmp	.-6      	; 0x58c <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 592:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
 596:	8f 7d       	andi	r24, 0xDF	; 223
 598:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 59c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
 5a0:	8f 7e       	andi	r24, 0xEF	; 239
 5a2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 5a6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 5aa:	8f 7e       	andi	r24, 0xEF	; 239
 5ac:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 5b0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 5b4:	81 60       	ori	r24, 0x01	; 1
 5b6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 5ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5be:	88 23       	and	r24, r24
 5c0:	11 f0       	breq	.+4      	; 0x5c6 <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
 5c2:	84 e0       	ldi	r24, 0x04	; 4
 5c4:	07 c0       	rjmp	.+14     	; 0x5d4 <__vector_10+0x118>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 5c6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 5ca:	87 fd       	sbrc	r24, 7
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <__vector_10+0x116>
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	01 c0       	rjmp	.+2      	; 0x5d4 <__vector_10+0x118>
 5d2:	83 e0       	ldi	r24, 0x03	; 3
 5d4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 5d8:	e0 d1       	rcall	.+960    	; 0x99a <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 5da:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 5de:	83 ff       	sbrs	r24, 3
 5e0:	27 c0       	rjmp	.+78     	; 0x630 <__vector_10+0x174>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 5e2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 5e6:	83 ff       	sbrs	r24, 3
 5e8:	23 c0       	rjmp	.+70     	; 0x630 <__vector_10+0x174>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 5ea:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
 5ee:	87 7f       	andi	r24, 0xF7	; 247
 5f0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 5f4:	82 e0       	ldi	r24, 0x02	; 2
 5f6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 5fa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 5fe:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
 602:	8e 7f       	andi	r24, 0xFE	; 254
 604:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 608:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 60c:	8e 7f       	andi	r24, 0xFE	; 254
 60e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 612:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 616:	80 61       	ori	r24, 0x10	; 16
 618:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 61c:	42 e0       	ldi	r20, 0x02	; 2
 61e:	60 e0       	ldi	r22, 0x00	; 0
 620:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 622:	9b de       	rcall	.-714    	; 0x35a <Endpoint_ConfigureEndpoint_Prv>
 624:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 628:	88 60       	ori	r24, 0x08	; 8
 62a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 62e:	b5 d1       	rcall	.+874    	; 0x99a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 630:	ff 91       	pop	r31
 632:	ef 91       	pop	r30
 634:	bf 91       	pop	r27
 636:	af 91       	pop	r26
 638:	9f 91       	pop	r25
 63a:	8f 91       	pop	r24
 63c:	7f 91       	pop	r23
 63e:	6f 91       	pop	r22
 640:	5f 91       	pop	r21
 642:	4f 91       	pop	r20
 644:	3f 91       	pop	r19
 646:	2f 91       	pop	r18
 648:	0f 90       	pop	r0
 64a:	0f be       	out	0x3f, r0	; 63
 64c:	0f 90       	pop	r0
 64e:	1f 90       	pop	r1
 650:	18 95       	reti

00000652 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 652:	1f 92       	push	r1
 654:	0f 92       	push	r0
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	0f 92       	push	r0
 65a:	11 24       	eor	r1, r1
 65c:	2f 93       	push	r18
 65e:	3f 93       	push	r19
 660:	4f 93       	push	r20
 662:	5f 93       	push	r21
 664:	6f 93       	push	r22
 666:	7f 93       	push	r23
 668:	8f 93       	push	r24
 66a:	9f 93       	push	r25
 66c:	af 93       	push	r26
 66e:	bf 93       	push	r27
 670:	cf 93       	push	r28
 672:	df 93       	push	r29
 674:	ef 93       	push	r30
 676:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 678:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
 67c:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 67e:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
 682:	d8 2f       	mov	r29, r24
 684:	d1 70       	andi	r29, 0x01	; 1
 686:	80 fd       	sbrc	r24, 0
 688:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 68a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
 68e:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 692:	87 7f       	andi	r24, 0xF7	; 247
 694:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 698:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 69a:	1e d0       	rcall	.+60     	; 0x6d8 <USB_Device_ProcessControlRequest>
 69c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 6a0:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 6a4:	88 60       	ori	r24, 0x08	; 8
 6a6:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 6aa:	cd 2b       	or	r28, r29
 6ac:	cf 70       	andi	r28, 0x0F	; 15
 6ae:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 6b2:	ff 91       	pop	r31
 6b4:	ef 91       	pop	r30
 6b6:	df 91       	pop	r29
 6b8:	cf 91       	pop	r28
 6ba:	bf 91       	pop	r27
 6bc:	af 91       	pop	r26
 6be:	9f 91       	pop	r25
 6c0:	8f 91       	pop	r24
 6c2:	7f 91       	pop	r23
 6c4:	6f 91       	pop	r22
 6c6:	5f 91       	pop	r21
 6c8:	4f 91       	pop	r20
 6ca:	3f 91       	pop	r19
 6cc:	2f 91       	pop	r18
 6ce:	0f 90       	pop	r0
 6d0:	0f be       	out	0x3f, r0	; 63
 6d2:	0f 90       	pop	r0
 6d4:	1f 90       	pop	r1
 6d6:	18 95       	reti

000006d8 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 6d8:	1f 93       	push	r17
 6da:	cf 93       	push	r28
 6dc:	df 93       	push	r29
 6de:	cd b7       	in	r28, 0x3d	; 61
 6e0:	de b7       	in	r29, 0x3e	; 62
 6e2:	aa 97       	sbiw	r28, 0x2a	; 42
 6e4:	0f b6       	in	r0, 0x3f	; 63
 6e6:	f8 94       	cli
 6e8:	de bf       	out	0x3e, r29	; 62
 6ea:	0f be       	out	0x3f, r0	; 63
 6ec:	cd bf       	out	0x3d, r28	; 61
 6ee:	e5 e0       	ldi	r30, 0x05	; 5
 6f0:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 6f2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 6f6:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 6f8:	21 e0       	ldi	r18, 0x01	; 1
 6fa:	ed 30       	cpi	r30, 0x0D	; 13
 6fc:	f2 07       	cpc	r31, r18
 6fe:	c9 f7       	brne	.-14     	; 0x6f2 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 700:	3c dd       	rcall	.-1416   	; 0x17a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 702:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	if (Endpoint_IsSETUPReceived())
 706:	83 ff       	sbrs	r24, 3
 708:	30 c1       	rjmp	.+608    	; 0x96a <USB_Device_ProcessControlRequest+0x292>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 70a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 70e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <USB_ControlRequest+0x1>
 712:	95 30       	cpi	r25, 0x05	; 5
 714:	09 f4       	brne	.+2      	; 0x718 <USB_Device_ProcessControlRequest+0x40>
 716:	83 c0       	rjmp	.+262    	; 0x81e <USB_Device_ProcessControlRequest+0x146>
 718:	30 f4       	brcc	.+12     	; 0x726 <USB_Device_ProcessControlRequest+0x4e>
 71a:	91 30       	cpi	r25, 0x01	; 1
 71c:	a9 f1       	breq	.+106    	; 0x788 <USB_Device_ProcessControlRequest+0xb0>
 71e:	68 f0       	brcs	.+26     	; 0x73a <USB_Device_ProcessControlRequest+0x62>
 720:	93 30       	cpi	r25, 0x03	; 3
 722:	91 f1       	breq	.+100    	; 0x788 <USB_Device_ProcessControlRequest+0xb0>
 724:	22 c1       	rjmp	.+580    	; 0x96a <USB_Device_ProcessControlRequest+0x292>
 726:	98 30       	cpi	r25, 0x08	; 8
 728:	09 f4       	brne	.+2      	; 0x72c <USB_Device_ProcessControlRequest+0x54>
 72a:	ef c0       	rjmp	.+478    	; 0x90a <USB_Device_ProcessControlRequest+0x232>
 72c:	99 30       	cpi	r25, 0x09	; 9
 72e:	09 f4       	brne	.+2      	; 0x732 <USB_Device_ProcessControlRequest+0x5a>
 730:	fb c0       	rjmp	.+502    	; 0x928 <USB_Device_ProcessControlRequest+0x250>
 732:	96 30       	cpi	r25, 0x06	; 6
 734:	09 f0       	breq	.+2      	; 0x738 <USB_Device_ProcessControlRequest+0x60>
 736:	19 c1       	rjmp	.+562    	; 0x96a <USB_Device_ProcessControlRequest+0x292>
 738:	94 c0       	rjmp	.+296    	; 0x862 <USB_Device_ProcessControlRequest+0x18a>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 73a:	80 38       	cpi	r24, 0x80	; 128
 73c:	21 f0       	breq	.+8      	; 0x746 <USB_Device_ProcessControlRequest+0x6e>
 73e:	82 38       	cpi	r24, 0x82	; 130
 740:	09 f0       	breq	.+2      	; 0x744 <USB_Device_ProcessControlRequest+0x6c>
 742:	13 c1       	rjmp	.+550    	; 0x96a <USB_Device_ProcessControlRequest+0x292>
 744:	08 c0       	rjmp	.+16     	; 0x756 <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 746:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 74a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <USB_Device_RemoteWakeupEnabled>
 74e:	99 23       	and	r25, r25
 750:	89 f0       	breq	.+34     	; 0x774 <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 752:	82 60       	ori	r24, 0x02	; 2
 754:	0f c0       	rjmp	.+30     	; 0x774 <USB_Device_ProcessControlRequest+0x9c>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 756:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_ControlRequest+0x4>
 75a:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 75c:	87 30       	cpi	r24, 0x07	; 7
 75e:	08 f0       	brcs	.+2      	; 0x762 <USB_Device_ProcessControlRequest+0x8a>
 760:	04 c1       	rjmp	.+520    	; 0x96a <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 762:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 766:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
 76a:	85 fb       	bst	r24, 5
 76c:	88 27       	eor	r24, r24
 76e:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 770:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 774:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 778:	97 7f       	andi	r25, 0xF7	; 247
 77a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 77e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				UEDATX = (Data >> 8);
 782:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 786:	cc c0       	rjmp	.+408    	; 0x920 <USB_Device_ProcessControlRequest+0x248>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 788:	28 2f       	mov	r18, r24
 78a:	2d 7f       	andi	r18, 0xFD	; 253
 78c:	09 f0       	breq	.+2      	; 0x790 <USB_Device_ProcessControlRequest+0xb8>
 78e:	ed c0       	rjmp	.+474    	; 0x96a <USB_Device_ProcessControlRequest+0x292>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 790:	88 23       	and	r24, r24
 792:	19 f0       	breq	.+6      	; 0x79a <USB_Device_ProcessControlRequest+0xc2>
 794:	82 30       	cpi	r24, 0x02	; 2
 796:	61 f0       	breq	.+24     	; 0x7b0 <USB_Device_ProcessControlRequest+0xd8>
 798:	e8 c0       	rjmp	.+464    	; 0x96a <USB_Device_ProcessControlRequest+0x292>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 79a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <USB_ControlRequest+0x2>
 79e:	81 30       	cpi	r24, 0x01	; 1
 7a0:	09 f0       	breq	.+2      	; 0x7a4 <USB_Device_ProcessControlRequest+0xcc>
 7a2:	e3 c0       	rjmp	.+454    	; 0x96a <USB_Device_ProcessControlRequest+0x292>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 7a4:	93 30       	cpi	r25, 0x03	; 3
 7a6:	09 f0       	breq	.+2      	; 0x7aa <USB_Device_ProcessControlRequest+0xd2>
 7a8:	80 e0       	ldi	r24, 0x00	; 0
 7aa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <USB_Device_RemoteWakeupEnabled>
 7ae:	2e c0       	rjmp	.+92     	; 0x80c <USB_Device_ProcessControlRequest+0x134>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 7b0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <USB_ControlRequest+0x2>
 7b4:	81 11       	cpse	r24, r1
 7b6:	2a c0       	rjmp	.+84     	; 0x80c <USB_Device_ProcessControlRequest+0x134>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 7b8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_ControlRequest+0x4>
 7bc:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 7be:	2f ef       	ldi	r18, 0xFF	; 255
 7c0:	28 0f       	add	r18, r24
 7c2:	26 30       	cpi	r18, 0x06	; 6
 7c4:	08 f0       	brcs	.+2      	; 0x7c8 <USB_Device_ProcessControlRequest+0xf0>
 7c6:	d1 c0       	rjmp	.+418    	; 0x96a <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 7c8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 7cc:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 7d0:	20 ff       	sbrs	r18, 0
 7d2:	1c c0       	rjmp	.+56     	; 0x80c <USB_Device_ProcessControlRequest+0x134>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 7d4:	93 30       	cpi	r25, 0x03	; 3
 7d6:	21 f4       	brne	.+8      	; 0x7e0 <USB_Device_ProcessControlRequest+0x108>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 7d8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
 7dc:	80 62       	ori	r24, 0x20	; 32
 7de:	14 c0       	rjmp	.+40     	; 0x808 <USB_Device_ProcessControlRequest+0x130>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 7e0:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
 7e4:	90 61       	ori	r25, 0x10	; 16
 7e6:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 7ea:	21 e0       	ldi	r18, 0x01	; 1
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	a9 01       	movw	r20, r18
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <USB_Device_ProcessControlRequest+0x11e>
 7f2:	44 0f       	add	r20, r20
 7f4:	55 1f       	adc	r21, r21
 7f6:	8a 95       	dec	r24
 7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <USB_Device_ProcessControlRequest+0x11a>
 7fa:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
				UERST = 0;
 7fe:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 802:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
 806:	88 60       	ori	r24, 0x08	; 8
 808:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 80c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 810:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 814:	87 7f       	andi	r24, 0xF7	; 247
 816:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 81a:	d4 dd       	rcall	.-1112   	; 0x3c4 <Endpoint_ClearStatusStage>
 81c:	a6 c0       	rjmp	.+332    	; 0x96a <USB_Device_ProcessControlRequest+0x292>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 81e:	81 11       	cpse	r24, r1
 820:	a4 c0       	rjmp	.+328    	; 0x96a <USB_Device_ProcessControlRequest+0x292>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 822:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <USB_ControlRequest+0x2>
 826:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 828:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
 82c:	80 78       	andi	r24, 0x80	; 128
 82e:	81 2b       	or	r24, r17
 830:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
 834:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 838:	87 7f       	andi	r24, 0xF7	; 247
 83a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 83e:	c2 dd       	rcall	.-1148   	; 0x3c4 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 840:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	while (!(Endpoint_IsINReady()));
 844:	80 ff       	sbrs	r24, 0
 846:	fc cf       	rjmp	.-8      	; 0x840 <USB_Device_ProcessControlRequest+0x168>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 848:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
 84c:	80 68       	ori	r24, 0x80	; 128
 84e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 852:	11 11       	cpse	r17, r1
 854:	02 c0       	rjmp	.+4      	; 0x85a <USB_Device_ProcessControlRequest+0x182>
 856:	82 e0       	ldi	r24, 0x02	; 2
 858:	01 c0       	rjmp	.+2      	; 0x85c <USB_Device_ProcessControlRequest+0x184>
 85a:	83 e0       	ldi	r24, 0x03	; 3
 85c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <USB_DeviceState>
 860:	84 c0       	rjmp	.+264    	; 0x96a <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 862:	80 58       	subi	r24, 0x80	; 128
 864:	82 30       	cpi	r24, 0x02	; 2
 866:	08 f0       	brcs	.+2      	; 0x86a <USB_Device_ProcessControlRequest+0x192>
 868:	80 c0       	rjmp	.+256    	; 0x96a <USB_Device_ProcessControlRequest+0x292>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 86a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <USB_ControlRequest+0x2>
 86e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <USB_ControlRequest+0x3>
 872:	8c 3d       	cpi	r24, 0xDC	; 220
 874:	53 e0       	ldi	r21, 0x03	; 3
 876:	95 07       	cpc	r25, r21
 878:	71 f5       	brne	.+92     	; 0x8d6 <USB_Device_ProcessControlRequest+0x1fe>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 87a:	83 e0       	ldi	r24, 0x03	; 3
 87c:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 87e:	8a e2       	ldi	r24, 0x2A	; 42
 880:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 882:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 884:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 886:	de 01       	movw	r26, r28
 888:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 88a:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 88c:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 88e:	51 e2       	ldi	r21, 0x21	; 33
 890:	e3 2f       	mov	r30, r19
 892:	f0 e0       	ldi	r31, 0x00	; 0
 894:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
 898:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 89a:	20 ff       	sbrs	r18, 0
 89c:	03 c0       	rjmp	.+6      	; 0x8a4 <USB_Device_ProcessControlRequest+0x1cc>
					{
						SerialByte >>= 4;
 89e:	e2 95       	swap	r30
 8a0:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 8a2:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 8a4:	ef 70       	andi	r30, 0x0F	; 15
 8a6:	8e 2f       	mov	r24, r30
 8a8:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 8aa:	ea 30       	cpi	r30, 0x0A	; 10
 8ac:	10 f0       	brcs	.+4      	; 0x8b2 <USB_Device_ProcessControlRequest+0x1da>
 8ae:	c7 96       	adiw	r24, 0x37	; 55
 8b0:	01 c0       	rjmp	.+2      	; 0x8b4 <USB_Device_ProcessControlRequest+0x1dc>
 8b2:	c0 96       	adiw	r24, 0x30	; 48
 8b4:	8d 93       	st	X+, r24
 8b6:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 8b8:	2f 5f       	subi	r18, 0xFF	; 255
 8ba:	24 31       	cpi	r18, 0x14	; 20
 8bc:	49 f7       	brne	.-46     	; 0x890 <USB_Device_ProcessControlRequest+0x1b8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 8be:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 8c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 8c4:	87 7f       	andi	r24, 0xF7	; 247
 8c6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 8ca:	6a e2       	ldi	r22, 0x2A	; 42
 8cc:	70 e0       	ldi	r23, 0x00	; 0
 8ce:	ce 01       	movw	r24, r28
 8d0:	01 96       	adiw	r24, 0x01	; 1
 8d2:	84 dc       	rcall	.-1784   	; 0x1dc <Endpoint_Write_Control_Stream_LE>
 8d4:	14 c0       	rjmp	.+40     	; 0x8fe <USB_Device_ProcessControlRequest+0x226>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 8d6:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <USB_ControlRequest+0x4>
 8da:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <USB_ControlRequest+0x5>
 8de:	ae 01       	movw	r20, r28
 8e0:	4f 5f       	subi	r20, 0xFF	; 255
 8e2:	5f 4f       	sbci	r21, 0xFF	; 255
 8e4:	4b dc       	rcall	.-1898   	; 0x17c <CALLBACK_USB_GetDescriptor>
 8e6:	bc 01       	movw	r22, r24
 8e8:	89 2b       	or	r24, r25
 8ea:	09 f4       	brne	.+2      	; 0x8ee <USB_Device_ProcessControlRequest+0x216>
 8ec:	3e c0       	rjmp	.+124    	; 0x96a <USB_Device_ProcessControlRequest+0x292>
 8ee:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 8f2:	97 7f       	andi	r25, 0xF7	; 247
 8f4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 8f8:	89 81       	ldd	r24, Y+1	; 0x01
 8fa:	9a 81       	ldd	r25, Y+2	; 0x02
 8fc:	cd dc       	rcall	.-1638   	; 0x298 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 8fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 902:	8b 77       	andi	r24, 0x7B	; 123
 904:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 908:	30 c0       	rjmp	.+96     	; 0x96a <USB_Device_ProcessControlRequest+0x292>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 90a:	80 38       	cpi	r24, 0x80	; 128
 90c:	71 f5       	brne	.+92     	; 0x96a <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 90e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 912:	87 7f       	andi	r24, 0xF7	; 247
 914:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 918:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 91c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 920:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 924:	8e 77       	andi	r24, 0x7E	; 126
 926:	77 cf       	rjmp	.-274    	; 0x816 <USB_Device_ProcessControlRequest+0x13e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 928:	81 11       	cpse	r24, r1
 92a:	1f c0       	rjmp	.+62     	; 0x96a <USB_Device_ProcessControlRequest+0x292>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 92c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <USB_ControlRequest+0x2>
 930:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <USB_ControlRequest+0x3>
 934:	99 27       	eor	r25, r25
 936:	02 97       	sbiw	r24, 0x02	; 2
 938:	c4 f4       	brge	.+48     	; 0x96a <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 93a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 93e:	87 7f       	andi	r24, 0xF7	; 247
 940:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 944:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <USB_ControlRequest+0x2>
 948:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

	Endpoint_ClearStatusStage();
 94c:	3b dd       	rcall	.-1418   	; 0x3c4 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 94e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 952:	81 11       	cpse	r24, r1
 954:	06 c0       	rjmp	.+12     	; 0x962 <USB_Device_ProcessControlRequest+0x28a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 956:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 95a:	87 fd       	sbrc	r24, 7
 95c:	02 c0       	rjmp	.+4      	; 0x962 <USB_Device_ProcessControlRequest+0x28a>
 95e:	81 e0       	ldi	r24, 0x01	; 1
 960:	01 c0       	rjmp	.+2      	; 0x964 <USB_Device_ProcessControlRequest+0x28c>
 962:	84 e0       	ldi	r24, 0x04	; 4
 964:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
 968:	07 dc       	rcall	.-2034   	; 0x178 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 96a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 96e:	83 ff       	sbrs	r24, 3
 970:	0a c0       	rjmp	.+20     	; 0x986 <USB_Device_ProcessControlRequest+0x2ae>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 972:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 976:	87 7f       	andi	r24, 0xF7	; 247
 978:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 97c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
 980:	80 62       	ori	r24, 0x20	; 32
 982:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 986:	aa 96       	adiw	r28, 0x2a	; 42
 988:	0f b6       	in	r0, 0x3f	; 63
 98a:	f8 94       	cli
 98c:	de bf       	out	0x3e, r29	; 62
 98e:	0f be       	out	0x3f, r0	; 63
 990:	cd bf       	out	0x3d, r28	; 61
 992:	df 91       	pop	r29
 994:	cf 91       	pop	r28
 996:	1f 91       	pop	r17
 998:	08 95       	ret

0000099a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 99a:	08 95       	ret

0000099c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 99c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 99e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <USB_DeviceState>
 9a2:	88 23       	and	r24, r24
 9a4:	99 f0       	breq	.+38     	; 0x9cc <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 9a6:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
 9aa:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 9ac:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
 9b0:	89 2f       	mov	r24, r25
 9b2:	81 70       	andi	r24, 0x01	; 1
 9b4:	90 fd       	sbrc	r25, 0
 9b6:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 9b8:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 9ba:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 9c2:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 9c4:	89 de       	rcall	.-750    	; 0x6d8 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 9c6:	cf 70       	andi	r28, 0x0F	; 15
 9c8:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 9cc:	cf 91       	pop	r28
 9ce:	08 95       	ret

000009d0 <_exit>:
 9d0:	f8 94       	cli

000009d2 <__stop_program>:
 9d2:	ff cf       	rjmp	.-2      	; 0x9d2 <__stop_program>
